import { test, expect } from 'vitest'
import {
  type JsonLike,
  type TPropertyName,
  type TRes,
  type TResult,
  type TErrorDetail,
  type TValidateOptions,
  type TOptions,
  type Context,
  type Re,
  defaultRootName,
  isString,
  plainCopy,
  propertyNameToString,
  errorCodes,
  errorMessages,
  ConfigureError,
  NotConfiguredError,
  RequiredPropertyError,
  FaultyValueError,
  UnknownError,
  Metadata,
  DefaultConfig,
  DefaultSettings,
  NoneModel,
  BaseModel,
  ObjModel,
  RootFactory,
  Factory
} from './index.js'

test('–ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç', () => {
  const v = new Factory()

  // –ö–æ—Ä–Ω–µ–≤–∞—è –º–æ–¥–µ–ª—å –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω–∞ –∫–∞–∫ —Å –æ–±–ª–∞—Å—Ç—å—é, —Ç–∞–∫ –∏ –±–µ–∑ –∏–º–µ–Ω–∏.
  const userModel = v/*.scope('UserModel')*/.obj({
    id: v.positive(), // —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–Ω–æ int().min(1)
    name: v.str().min(3),
    email: /^[0-9a-z]+@[0-9a-z]+\.[a-z]+$/i, // —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–Ω–æ v.re(...)
    gender: v.enum('male', 'female').optional(),
    // –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º –æ–±—ä–µ–∫—Ç –≤ —Ç–∏–ø, –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è .stopError() - –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å
    // –æ—à–∏–±–∫—É –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–ª–∏ `null`(–µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç).
    address: v.obj({
      city: v.str().nonempty(), // —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–Ω–æ .str().min(1)
      street: 'any string', // —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–Ω–æ .str()
      zipCode: ''
    }).stopError()
  })

  const sampleUser = {
    id: 1,
    name: 'John',
    email: 'a@b.c',
    // gender: 'male' as ('male' | 'female'),
    address: {
      city: 'Springfield',
      street: '742 Evergreen Terrace',
      zipCode: '90210'
    }
  }
  expect(userModel.validate(plainCopy(sampleUser))).toStrictEqual({ ok: true, value: sampleUser })
  // @ts-expect-error
  sampleUser.gender = 'male'
  expect(userModel.validate(plainCopy(sampleUser))).toStrictEqual({ ok: true, value: sampleUser })

  // –û—à–∏–±–∫–∞ –≤ address –≤–µ—Ä–Ω–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
  sampleUser.address.city = ''
  expect(userModel.validate(plainCopy(sampleUser)))
    .toStrictEqual({
      ok: true,
      value: { id: 1, name: 'John', email: 'a@b.c', gender: 'male', address: null as any },
      details: { warnings: expect.any(Object) }
    })
  // –û—à–∏–±–∫–∞ –≤ User –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç –≤–∞–ª–∏–¥–∞—Ü–∏—é
  sampleUser.id = 0
  expect(userModel.validate(plainCopy(sampleUser)))
    .toStrictEqual({
      ok: false,
      value: null,
      details: { errors: expect.any(Object) }
    })
})

test('–ó–∞–º–µ–Ω–∞ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ —Ç–∏–ø–∞', () => {
  // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã —á–µ—Ä–µ–∑ JSDoc.
  const v = new Factory({
    throwIfConfigureError: true,
    createMode: 'obj'
  })

  const arrModel = v.arr([
    v.obj({ enabled: v.enum('on', 'off') })
      .def({ AhHaHa: 'üòã' }) // –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      .stopError()           // –Ω–µ –ø–æ–¥–Ω–∏–º–∞—Ç—å –æ—à–∏–±–∫—É
  ]).freeze()

  expect(arrModel.validate([
    { enabled: 'on' },
    { enabled: 'oh no' },
    { enabled: 'off' }
  ]).value).toStrictEqual([
    { enabled: 'on' },
    { AhHaHa: 'üòã' },
    { enabled: 'off' }
  ])
})

test('–†–∞—Å—à–∏—Ä—è–µ–º—ã–µ –æ–±–ª–∞—Å—Ç–∏ scope(Scope name, options)', () => {
  // –ú–æ–¥–µ–ª–∏ —Ç–∏–ø–æ–≤ –∏–º–µ—é—Ç –¥–≤–∞ –≤–∏–¥–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫:
  //  + –ì–ª–æ–±–∞–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è - –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ —Ñ–∞–±—Ä–∏–∫–∏.
  //  + –õ–æ–∫–∞–ª—å–Ω—ã–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏     - –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –º–µ—Ç–æ–¥–∞–º–∏ –∏–Ω—Å—Ç–∞–Ω—Å–∞ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞.
  //
  // –õ–æ–∫–∞–ª—å–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ–≥–¥–∞ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥ –¥–ª—è –ª—é–±–æ–π –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç–∞.
  // –ì–ª–æ–±–∞–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ª–∏—à—å –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–æ–≤–µ–¥–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –±–µ–∑ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —è–≤–Ω–æ –≤—ã–∑–≤–∞—Ç—å –º–µ—Ç–æ–¥—ã –∏–Ω—Å—Ç–∞–Ω—Å–∞.
  // –ù–∞–ø—Ä–∏–º–µ—Ä { stopIfError: true, removeFaulty: true } –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç –¥–ª—è –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π model.stopError().removeFaulty().

  const v = new Factory()

  // –†–∞—Å—à–∏—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é. –ú–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –∏ –≤—Ç–æ—Ä—É—é —Ñ–∞–±—Ä–∏–∫—É, –Ω–æ –º—ã –ø–æ—Ç–µ—Ä—è–µ–º —Å–≤—è–∑—å –∫–µ—à–∞ regExp.
  // –ü–∞—Ä–∞–º–µ—Ç—Ä –∏–º–µ–Ω–∏ –Ω–µ –∏–º–µ–µ—Ç –Ω–∏–∫–∞–∫–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è.
  const vNullable = v.scope('Nullable', { stopIfError: true })
  const vRemovable = v.scope('Removable', { removeFaulty: true })
  const vCombined = v.scope('Combined', { stopIfError: true, removeFaulty: true })
  const itemModel = v.enum(1, 2)

  const model = v.obj({
    // –ü—Ä–∏ –≤—Ö–æ–¥–µ –≤ —ç—Ç—É –æ–±–ª–∞—Å—Ç—å, —ç–ª–µ–º–µ–Ω—Ç—ã –≤–µ—Ä–Ω—É—Ç ok:false, –Ω–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—É—á–∏—Ç —É–∫–∞–∑–∞–Ω–∏–µ –∑–∞—Ç–µ—Ä–µ—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã –Ω—É–ª—è–º–∏(–∏–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é).
    // –ú–∞—Å—Å–∏–≤ –æ—Å—Ç–∞–≤–∏—Ç —ç–ª–µ–º–µ–Ω—Ç—ã –∫–∞–∫ –≤–∞–ª–∏–¥–Ω—ã–µ –∏ –Ω–µ –±—É–¥–µ—Ç –∑–Ω–∞—Ç—å –æ–± –æ—à–∏–±–∫–∞—Ö.
    nullable: vNullable.arr([itemModel]),
    // –ü—Ä–∏ –≤—Ö–æ–¥–µ –≤ —ç—Ç—É –æ–±–ª–∞—Å—Ç—å, —ç–ª–µ–º–µ–Ω—Ç—ã –≤–µ—Ä–Ω—É—Ç ok:false, –Ω–æ –º–∞—Å—Å–∏–≤ –ø–æ–ª—É—á–∏—Ç —É–∫–∞–∑–∞–Ω–∏–µ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—à–∏–±–∫—É –∏ —É–¥–∞–ª–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç.
    removable: vRemovable.arr([itemModel]),
    // –°—Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ stopIfError, removeFaulty –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è, —Ç–∞–∫ –∫–∞–∫ –º–∞—Å—Å–∏–≤ –Ω–µ —É–∑–Ω–∞–µ—Ç –æ–± –æ—à–∏–±–∫–∞—Ö.
    combined: vCombined.arr([itemModel]),
    // –ê –∑–¥–µ—Å—å –º—ã —è–≤–Ω–æ –≥–æ–≤–æ—Ä–∏–º —ç–ª–µ–º–µ–Ω—Ç—É –ø—Ä–∏ –æ—à–∏–±–∫–µ –≤–µ—Ä–Ω—É—Ç—å –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –ú–∞—Å—Å–∏–≤ –Ω–µ –±—É–¥–µ—Ç –∑–Ω–∞—Ç—å –æ–± –æ—à–∏–±–∫–∞—Ö.
    replace: v.arr([itemModel.def('faulty').stopError()])
  })

  expect(model.validate({
    nullable: [1, 2, 3, 1],
    removable: [1, 2, 3, 1],
    combined: [1, 2, 3, 1],
    replace: [1, 2, 3, 1]
  })).toStrictEqual({
    ok: true,
    value: {
      nullable: [1, 2, null, 1],
      removable: [1, 2, 1],
      combined: [1, 2, null, 1],
      replace: [1, 2, 'faulty', 1]
    },
    details: { warnings: expect.any(Object) }
  })

  expect(model.validate({
    nullable: [],
    removable: [3, 4, 5],
    combined: [3, 4, 5],
    replace: [3, 4, 5]
  })).toStrictEqual({
    ok: true,
    value: {
      nullable: [],
      removable: [],
      combined: [null, null, null],
      replace: ['faulty', 'faulty', 'faulty']
    },
    details: { warnings: expect.any(Object) }
  })
})

test('–ó–∞–º–æ—Ä–æ–∑–∫–∞ freeze()', () => {
  // throwIfConfigureError - –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–æ–≤–∞–Ω–∏–∏ –º–æ–¥–µ–ª–∏
  const v = new Factory({ throwIfConfigureError: true })

  const model = v.of({ foo: 1, bar: 2 })
  expect(model.isFrozen()).toBe(false)
  const modelFrozen = model.freeze()
  expect(model).not.toBe(modelFrozen)

  // –ü–æ—Å–ª–µ –∑–∞–º–æ—Ä–æ–∑–∫–∏ –º–æ–¥–µ–ª–∏ –Ω–µ –º–æ–≥—É—Ç –º–µ–Ω—è—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã ...
  const re = new RegExp(errorMessages.ModelIsFrozenError(null).message.slice(0, 10))
  expect(() => (modelFrozen as ObjModel<any>).optional()).toThrow(re)
  // ... –Ω–æ –º–æ–≥—É—Ç –∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥–µ–ª—å, –æ–ø—Ü–∏—è –∑–∞–º–æ—Ä–æ–∑–∫–∏ –±—É–¥–µ—Ç –Ω–æ–≤–æ–π –æ–±–µ—Ä—Ç–∫–∏ —Å–±—Ä–æ—à–µ–Ω–∞
  const unfreeze = modelFrozen.copy() as ObjModel<any>
  expect(unfreeze.optional()).toBeInstanceOf(ObjModel)

  expect(model.validate({ foo: 2, bar: 3 })).toStrictEqual({ ok: true, value: { foo: 2, bar: 3 } })
  expect(modelFrozen.validate({ foo: 4, bar: 5 })).toStrictEqual({ ok: true, value: { foo: 4, bar: 5 } })
  expect(unfreeze.validate({ foo: 6, bar: 7 })).toStrictEqual({ ok: true, value: { foo: 6, bar: 7 } })
})

test('–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –∫–ª–∞—Å—Å–æ–≤', () => {
  // –ö–ª–∞—Å—Å –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞ –æ–±—è–∑–∞–Ω —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –º–µ—Ç–æ–¥ `_validate()`
  class PhoneNumberModel extends BaseModel<string> {
    protected override _validate (ctx: Context, value: any): TRes<string> {
      if (!isString(value)) {
        return ctx.throwFaultyValueError(value, 'Expected a string')
      }
      // –ü–æ–ª—É—á–∏–º —Å—Å—ã–ª–∫—É –Ω–∞ Metadata –∏ –ø—Ä–æ–≤–µ—Ä–∏–º –≤–∞—Ä–∏–∞–Ω—Ç—ã RegExp
      const expectedType = (this._meta as Metadata<Re[]>).expectedType
      for (const re of expectedType) {
        if (re.test(value)) {
          return { ok: true, value }
        }
      }
      return ctx.throwFaultyValueError(value, 'Invalid phone number format')
    }
  }

  // –ï—Å—Ç—å –¥–≤–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–∞–±—Ä–∏—á–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏:
  //  1. –î–æ–±–∞–≤–∏—Ç—å —Ñ–∞–±—Ä–∏—á–Ω—ã–π –º–µ—Ç–æ–¥ –∫ `RootFactory` –∏ –æ–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —É–¥–∞–ª–∏–≤ –Ω–µ–Ω—É–∂–Ω—ã–π `RegExpCache`.
  //  2. –î–æ–±–∞–≤–∏—Ç—å —Ñ–∞–±—Ä–∏—á–Ω—ã–π –º–µ—Ç–æ–¥ –∫ `RootFactory` –∏ –æ–±–Ω–æ–≤–∏—Ç—å –∫–ª–∞—Å—Å `Factory` - —ç—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç —Ä–∞—Å—à–∏—Ä—è—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é,
  //     –Ω–æ —á–∞—â–µ –≤—Å–µ–≥–æ –∏–∑–±—ã—Ç–æ—á–Ω–æ, —Ç–∞–∫ –∫–∞–∫ –º–µ—Ç–æ–¥—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫(`stopError()/removeFaulty()`) –¥–æ—Å—Ç—É–ø–Ω—ã –Ω–∞ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞—Ö.

  // –í–∞—Ä–∏–∞–Ω—Ç 1 - –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç —á—Ç–æ MySimpleFactory —Å—Ç–∞–Ω–µ—Ç –ø—É–±–ª–∏—á–Ω–æ–π —Ñ–∞–±—Ä–∏–∫–æ–π
  class MySimpleFactory extends RootFactory {
    // –ö–æ–ø–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞—Ç—É—Ä—É RootFactory –±–µ–∑ RegExpCache
    constructor(options?: undefined | null | TOptions) {
      super(options)
    }

    phoneNumber (): PhoneNumberModel {
      // –î–æ–±–∞–≤–∏–º –∫ —Ñ–∞–±—Ä–∏–∫–µ –Ω–æ–≤—ã–π —Ç–∏–ø, –∏—Å–ø–æ–ª—å–∑—É—è –∫–µ—à regExp
      const re = this._regExpCache.getOf(/^\d{3}-\d{3}-\d{4}$/)
      const meta = Metadata.re(re, /* ...rest: Re[] */)
      // –ü–æ—Å–ª–µ–¥–Ω–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä null, —ç—Ç–æ –∫–ª—é—á Model.key –∏ –∑–¥–µ—Å—å –æ–Ω –Ω–µ –Ω—É–∂–µ–Ω.
      // –≠—Ç–æ —Å–≤–æ–π—Å—Ç–≤–æ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–≤—è–∑–∞–Ω–æ –∫ —Å–≤–æ–π—Å—Ç–≤—É –æ–±—ä–µ–∫—Ç–∞.
      return new PhoneNumberModel(this._config, this._defaultSettings, meta, null)
    }
  }

  // –í–∞—Ä–∏–∞–Ω—Ç 2.1 - –ù–µ —Ç—Ä–æ–≥–∞–µ–º –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä
  class MyRootFactory extends RootFactory {
    phoneNumber (): PhoneNumberModel {
      const re = this._regExpCache.getOf(/^\d{3}-\d{3}-\d{4}$/)
      const meta = Metadata.re(re, /* ...rest: Re[] */)
      return new PhoneNumberModel(this._config, this._defaultSettings, meta, null)
    }
  }

  // –í–∞—Ä–∏–∞–Ω—Ç 2.2 - –ü–æ–ª–Ω–æ—Å—Ç—å—é –∫–æ–ø–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—É—é Factory –∏ –∑–∞–º–µ–Ω—è–µ–º RootFactory –Ω–∞ MyRootFactory –≤ —Ç—Ä–µ—Ö –º–µ—Å—Ç–∞—Ö
  class MyFactory extends MyRootFactory {
    protected readonly _registeredScopeNames = new Set<string>()

    constructor(options?: undefined | null | TOptions) {
      super(options)
    }

    protected _getScopeNameOf (name: string): string {
      if (!isString(name)) {
        name = ''
      }
      let freeName = name
      let counter = 0
      while (this._registeredScopeNames.has(freeName)) {
        freeName = `${name}(${++counter})`
      }
      this._registeredScopeNames.add(freeName)
      return freeName
    }

    scope (name: string, options?: undefined | null | TValidateOptions): MyRootFactory {
      const config = this._config.extends(options ?? null, this._getScopeNameOf(isString(name) ? name : ''))
      return new MyRootFactory(config, this._regExpCache)
    }
  }

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—à –≤–∞–ª–∏–¥–∞—Ç–æ—Ä

  // –í–∞—Ä–∏–∞–Ω—Ç 1
  const v = new MySimpleFactory()

  const phoneModel = v.phoneNumber()
  expect(phoneModel.validate('123-456-7890').value)
    .toBe('123-456-7890')
  // @ts-expect-error
  expect(phoneModel.validate('123-456-789').details.errors[0].message)
    .toContain('Invalid phone number format')

  // –í–∞—Ä–∏–∞–Ω—Ç 2 –ø–æ–ª–Ω–æ—Å—Ç—å —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–µ–Ω –∏ –ø–æ–∑–≤–æ–ª—è–µ—Ç —Ä–∞—Å—à–∏—Ä—è—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
  const v2 = new MyFactory()

  const phoneModel2 = v2.phoneNumber()
  expect(phoneModel2.validate('123-456-7890').value)
    .toBe('123-456-7890')
  // @ts-expect-error
  expect(phoneModel2.validate('123-456-789').details.errors[0].message)
    .toContain('Invalid phone number format')
})

test('–û—à–∏–±–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–∏–ø–æ–≤ getConfigureError()', () => {
  const v = new Factory()

  // –¢–∏–ø None –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ –ø—É–±–ª–∏—á–Ω—É—é —Ñ–∞–±—Ä–∏–∫—É, –Ω–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –∑–Ω–∞—á–µ–Ω–∏–π –Ω–µ –ø—Ä–æ—à–µ–¥—à–∏—Ö –ø—Ä–æ–≤–µ—Ä–∫—É –ø—Ä–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–æ–≤–∞–Ω–∏–∏.
  // –ï—Å–ª–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã –æ—à–∏–±–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–æ–≤–∞–Ω–∏—è, –ª—é–±–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ —ç—Ç–æ–≥–æ —Ç–∏–ø–∞ –ø–æ–ª—É—á–∏—Ç –æ—à–∏–±–∫—É {ok: false, value: null}.
  // –ü–æ–¥–Ω—è—Ç–∏–µ —ç—Ç–æ–π –æ—à–∏–±–∫–∏ –±—É–¥–µ—Ç –∑–∞–≤–∏—Å–µ—Ç—å –æ—Ç –æ–ø—Ü–∏–π –≤–∞–ª–∏—Ü–∏–∏.
  const none = new NoneModel(new DefaultConfig(), new DefaultSettings(), Metadata.none(), null)
  expect(none.validate(null)).toStrictEqual({ ok: false, value: null, details: expect.any(Object) })

  // –≠–º—É–ª–∏—Ä–æ–≤–∞—Ç—å —Ç–∞–∫–æ–π —Ç–∏–ø –º–æ–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏–≤ –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–µ –¥–ª—è json –∑–Ω–∞—á–µ–Ω–∏–µ
  // @ts-expect-error
  const unsupported = v.obj({ foo: BigInt(0) })
  expect(unsupported.validate({ foo: BigInt(0) })).toStrictEqual({ ok: false, value: null, details: expect.any(Object) })

  // –û–ø–∏—Å–∞–Ω–∏–µ –≤—Å–µ—Ö –æ—à–∏–±–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–æ —á–µ—Ä–µ–∑ getConfigureError()
  // –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ —Å–æ–±–∏—Ä–∞–µ—Ç –æ—à–∏–±–∫–∏ –æ—Ç –∫–æ—Ä–Ω—è –∏—Å—Å–ª–µ–¥—É–µ–º–æ–≥–æ —Ç–∏–ø–∞.
  const errors: TErrorDetail[] | null = unsupported.getConfigureError()
  expect(errors).toBeInstanceOf(Array)
  // –ü–µ—Ä–≤—ã–π –≤—ã–∑–æ–≤ —ç—Ç–æ–≥–æ –º–µ—Ç–æ–¥–∞ —É–¥–∞–ª—è–µ—Ç –≤—Å–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏.
  expect(unsupported.getConfigureError()).toBe(null)

  // –ü—É—Ç—å –∫ –æ—à–∏–±–∫–µ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ <root>.foo, –∑–¥–µ—Å—å null —ç—Ç–æ –Ω–∞—à –∫–æ—Ä–µ–≤–æ–π –æ–±—ä–µ–∫—Ç –±–µ–∑ –∏–º–µ–Ω–∏
  const propPath = `${propertyNameToString(null)}.foo`
  // –ù–∞–π–¥–µ–º –æ–∂–∏–¥–∞–µ–º—É—é –æ—à–∏–±–∫—É —Å –∫–æ–¥–æ–º ConfigureError
  const errorValue: TErrorDetail = errors!.find(({ code, path }) => code === errorCodes.ConfigureError && path === propPath)!
  // –ü—Ä–æ–≤–µ—Ä–∏–º —Å—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –Ω–∞—á–∞–ª–æ –æ–ø–∏—Å–∞–Ω–∏—è –æ—à–∏–±–∫–∏, –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞ –ø–æ–ª—É—á–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–Ω—Å—Ç–∞–Ω—Ç–Ω—ã–º –Ω–∞—á–∞–ª–æ–º –≤ –æ–ø–∏—Å–∞–Ω–∏–∏
  const errorMessage = errorMessages.ConfigureError('foo').message.slice(0, 10)

  expect(errorValue).toStrictEqual({ code: errorCodes.ConfigureError, path: propPath, message: expect.stringContaining(errorMessage) })

  // throw –ø—Ä–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
  const vError = new Factory({ throwIfConfigureError: true })
  // @ts-expect-error
  expect(() => vError.arr([BigInt(1)])).toThrow(ConfigureError)

  expect(() => vError.num().range(10, 0)).toThrow(ConfigureError)
})

test('–û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ throw', () => {
  const v = new Factory({ throwIfError: true })

  const nested = v.obj({ prop: v.enum(1, 2) })
  const sampleModel = v.obj({
    id: v.positive(),
    nested: nested
  })

  expect(sampleModel.validate({ id: 1, nested: { prop: 2 } })).toStrictEqual({ ok: true, value: { id: 1, nested: { prop: 2 } } })

  expect(() => sampleModel.validate({ id: 1, nested: { prop: 'error value' } })).toThrow(FaultyValueError)
  expect(() => sampleModel.validate({ id: 0, nested: { prop: 2 } })).toThrow(FaultyValueError)
  expect(() => sampleModel.validate({ id: 1 })).toThrow(RequiredPropertyError)

  // –î–ª—è –º–∞—Å—Å–∏–≤–æ–≤ [BigInt(1)] —Ç–∞–∫–æ–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç –∏–∑-–∑–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –æ—à–∏–±–æ–∫ –ø—Ä–∏ –ø–æ–¥–±–æ—Ä–µ –∏ –æ—à–∏–±–∫–∞ –±—É–¥–µ—Ç –¥—Ä—É–≥–æ–π
  // @ts-expect-error
  const mBigint = v.obj({ prop: BigInt(1) })
  expect(() => mBigint.validate({ prop: 1 })).toThrow(NotConfiguredError)

  const mCustom = v.union(1, 'ok', v.custom((_path: TPropertyName[], _value: any) => {
    return {
      ok: false,
      value: null,
      details: { errors: [{ path: '—ç—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è', code: errorCodes.FaultyValueError, message: '...' }] }
    }
  }))
  expect(() => mCustom.validate(null)).toThrow(FaultyValueError)

  const mUnknownError = v.union(1, 'ok', v.custom((_path: TPropertyName[], _value: any) => {
    throw 0
  }))
  expect(() => mUnknownError.validate(null)).toThrow(UnknownError)

  const vCustom = new Factory()
  const mUnknownCustomError = vCustom.union(1, 'ok', v.custom((_path: TPropertyName[], _value: any) => {
    throw 0
  }))
  expect(mUnknownCustomError.validate(null)).toStrictEqual({
    ok: false,
    value: null,
    details: { errors: [expect.any(Object)] }
  })
})

test('–í—Å–µ —Ç–∏–ø—ã', () => {
  const v = new Factory()

  // –¢–∏–ø –Ω–µ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –∏ –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ª—é–±–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–∞–∫ –µ—Å—Ç—å.
  expect(v.raw().validate(undefined)).toStrictEqual({ ok: true, value: undefined })
  expect(v.obj({ foo: v.raw() }).def({ foo: 'bar' }).stopError().validate({}))
    .toStrictEqual({ ok: true, value: { foo: 'bar' }, details: { warnings: expect.any(Object) } })
  expect(v.obj({ foo: v.raw().optional(123) }).validate({}))
    .toStrictEqual({ ok: true, value: { foo: 123 } })

  // –ê–≤—Ç–æ-–ø–∞—Ä—Å–µ—Ä –ª—é–±–æ–≥–æ JsonLike —Ç–∏–ø–∞ + Regexp –¥–ª—è —Å—Ç—Ä–æ–∫ + –≤–ª–æ–∂–µ–Ω–Ω—ã–µ —Ç–∏–ø—ã Model
  expect(v.of({ foo: /[0-7]{1}/ }).validate({ foo: '6' })).toStrictEqual({ ok: true, value: { foo: '6' } })
  expect(v.of({ foo: /[0-7]{1}/ }).validate({ foo: '8' })).toStrictEqual({ ok: false, value: null, details: { errors: expect.any(Object) } })

  expect(v.bool().validate(true)).toStrictEqual({ ok: true, value: true })
  expect(v.bool().validate(false)).toStrictEqual({ ok: true, value: false })
  expect(v.bool().validate(null)).toStrictEqual({ ok: false, value: null, details: { errors: expect.any(Object) } })

  expect(v.num().validate(1.23)).toStrictEqual({ ok: true, value: 1.23 })
  expect(v.num().validate('1')).toStrictEqual({ ok: false, value: null, details: { errors: expect.any(Object) } })
  expect(v.num().validate(BigInt(0))).toStrictEqual({ ok: false, value: null, details: { errors: expect.any(Object) } })
  expect(v.num().min(5).validate(5)).toStrictEqual({ ok: true, value: 5 })
  expect(v.num().max(5).validate(5)).toStrictEqual({ ok: true, value: 5 })
  expect(v.num().min(5).validate(4.9)).toStrictEqual({ ok: false, value: null, details: { errors: expect.any(Object) } })
  expect(v.num().max(5).validate(5.1)).toStrictEqual({ ok: false, value: null, details: { errors: expect.any(Object) } })
  expect(v.num().min(-10).max(+10).validate(-2)).toStrictEqual({ ok: true, value: -2 })
  expect(v.num().min(-10).max(+10).validate(-12))
    .toStrictEqual({ ok: false, value: null, details: { errors: expect.any(Object) } })
  expect(v.num().min(-10).max(+10).validate(+12))
    .toStrictEqual({ ok: false, value: null, details: { errors: expect.any(Object) } })
  // exclusive: true
  expect(v.num().min(5, true).validate(5)).toStrictEqual({ ok: false, value: null, details: { errors: expect.any(Object) } })
  expect(v.num().max(5, true).validate(5)).toStrictEqual({ ok: false, value: null, details: { errors: expect.any(Object) } })

  // –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ min(0) float >= 0
  expect(v.nonnegative().validate(0)).toStrictEqual({ ok: true, value: 0 })
  expect(v.nonnegative().validate(-0.0001)).toStrictEqual({ ok: false, value: null, details: { errors: expect.any(Object) } })

  // –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ v.num().int()
  expect(v.int().validate(5)).toStrictEqual({ ok: true, value: 5 })
  expect(v.int().validate(5.8)).toStrictEqual({ ok: false, value: null, details: { errors: expect.any(Object) } })

  // –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ v.num().int().min(1)
  expect(v.positive().validate(1)).toStrictEqual({ ok: true, value: 1 })
  expect(v.positive().validate(0)).toStrictEqual({ ok: false, value: null, details: { errors: expect.any(Object) } })
  expect(v.positive().validate(1.2)).toStrictEqual({ ok: false, value: null, details: { errors: expect.any(Object) } })

  expect(v.range(-10, +10).validate(0)).toStrictEqual({ ok: true, value: 0 })
  expect(v.range(-10, +10).validate(-12)).toStrictEqual({ ok: false, value: null, details: { errors: expect.any(Object) } })
  expect(v.range(-10, +10).validate(+12)).toStrictEqual({ ok: false, value: null, details: { errors: expect.any(Object) } })
  expect(v.range(-10, +10, true).validate(9.9)).toStrictEqual({ ok: true, value: 9.9 })
  expect(v.range(-10, +10, true).validate(10)).toStrictEqual({ ok: false, value: null, details: { errors: expect.any(Object) } })

  expect(v.str().validate('')).toStrictEqual({ ok: true, value: '' })
  expect(v.str().nonempty().validate('any value')).toStrictEqual({ ok: true, value: 'any value' })
  expect(v.str().nonempty().validate('')).toStrictEqual({ ok: false, value: null, details: { errors: expect.any(Object) } })

  expect(v.re(/abc/).validate('_abc_')).toStrictEqual({ ok: true, value: '_abc_' })
  expect(v.re(/abc/).min(5).validate('_abc_')).toStrictEqual({ ok: true, value: '_abc_' })
  expect(v.re(/abc/).min(6).validate('_abc_')).toStrictEqual({ ok: false, value: null, details: { errors: expect.any(Object) } })
  expect(v.re(/abc/).validate('_abXc_')).toStrictEqual({ ok: false, value: null, details: { errors: expect.any(Object) } })
  expect(v.re(/abc/, /bXc/).validate('_abXc_')).toStrictEqual({ ok: true, value: '_abXc_' })

  // null - —ç—Ç–æ –ø—Å–µ–≤–¥–æ–Ω–∏–º v.literal(null)
  expect(v.null().validate(null)).toStrictEqual({ ok: true, value: null })
  expect(v.null().validate('not null')).toStrictEqual({ ok: false, value: null, details: { errors: expect.any(Object) } })
  expect(v.literal(1).validate(1)).toStrictEqual({ ok: true, value: 1 })
  expect(v.literal('off').validate('off')).toStrictEqual({ ok: true, value: 'off' })
  expect(v.literal('off').validate('on')).toStrictEqual({ ok: false, value: null, details: { errors: expect.any(Object) } })

  // –ù–µ—Å–∫–æ–ª—å–∫–æ –ª–∏—Ç–µ—Ä–∞–ª–æ–≤
  expect(v.enum(false, true, 'on', 'off').validate('on')).toStrictEqual({ ok: true, value: 'on' })
  expect(v.enum(false, true, 'on', 'off').validate(1)).toStrictEqual({ ok: false, value: null, details: { errors: expect.any(Object) } })

  const simpleObj = v.obj({
    a: null,
    b: true,
    c: 0,
    d: 'any str',
    e: /re/,
    nested: { f: ['str array'] },
    array: [0],
  })
  expect(simpleObj.validate({
    a: null,
    b: false,
    c: 123,
    d: 'hello',
    e: '_re_',
    nested: { f: ['one', 'two'] },
    array: [1, 2, 3],
  })).toStrictEqual({
    ok: true, value: {
      a: null,
      b: false,
      c: 123,
      d: 'hello',
      e: '_re_',
      nested: { f: ['one', 'two'] },
      array: [1, 2, 3],
    }
  })
  expect(simpleObj.validate({
    a: 'error value', // <= error type
    b: false,
    c: 123,
    d: 'hello',
    e: '_re_',
    nested: { f: ['one', 'two'] },
    array: [1, 2, 3],
  })).toStrictEqual({ ok: false, value: null, details: { errors: expect.any(Object) } })

  const simpleArr = v.arr([{ foo: 0 }, { bar: '' }])
  expect(simpleArr.validate([{ foo: 123 }]))
    .toStrictEqual({ ok: true, value: [{ foo: 123 }] })
  expect(simpleArr.validate([{ foo: 123 }, { bar: 'str' }]))
    .toStrictEqual({ ok: true, value: [{ foo: 123 }, { bar: 'str' }] })
  expect(simpleArr.validate([{ foo: 123 }, { bar: 456 }]))
    .toStrictEqual({ ok: false, value: null, details: { errors: expect.any(Object) } })
  // –í–∞—Ä–∏–∞–Ω—Ç —Å min/max
  const numArray = v.arr([0]).range(1, 4)
  expect(numArray.validate([1, 2]))
    .toStrictEqual({ ok: true, value: [1, 2] })
  expect(numArray.validate([1, 2, 3, 4, 5]))
    .toStrictEqual({ ok: false, value: null, details: { errors: expect.any(Object) } })

  // —Ç–æ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–∏–ø–æ–≤
  const simpleTuple = v.tuple(['str', { prop: v.enum('on', 'off') }])
  expect(simpleTuple.validate(['abc', { prop: 'on' }]))
    .toStrictEqual({ ok: true, value: ['abc', { prop: 'on' }] })
  expect(simpleTuple.validate(['abc', 'xyz', { prop: 'on' }]))
    .toStrictEqual({ ok: false, value: null, details: { errors: expect.any(Object) } })

  // –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Ç–∏–ø–∞
  const simpleUnion = v.union(v.enum('on', 'off'), true)
  expect(simpleUnion.validate('on')).toStrictEqual({ ok: true, value: 'on' })
  expect(simpleUnion.validate(false)).toStrictEqual({ ok: true, value: false })
  expect(simpleUnion.validate('true'))
    .toStrictEqual({ ok: false, value: null, details: { errors: expect.any(Object) } })

  // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è —Ñ—É–Ω–∫—Ü–∏—è
  let err: null | TErrorDetail = null
  function customValidate (_path: TPropertyName[], value: any): TResult<JsonLike> {
    if (err) {
      // @ts-expect-error –ó–Ω–∞—á–µ–Ω–∏–µ ok –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤ false, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –µ—Å–ª–∏ –µ—Å—Ç—å –ø–æ–ª–µ errors
      return { ok: true, value, details: { errors: [err] } }
    }
    return { ok: true, value }
  }
  const simpleCustom = v.custom(customValidate)
  expect(simpleCustom.validate('my value')).toStrictEqual({ ok: true, value: 'my value' })
  err = { code: 0, path: '—ç—Ç–æ –ø–æ–ª–µ –±—É–¥–µ—Ç –∑–∞–º–µ–Ω–µ–Ω–æ, –∑–¥–µ—Å—å –Ω—É–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É', message: '–û—à–∏–±–∫–∞' }
  const result = simpleCustom.validate('my value')
  expect(result.ok).toBe(false)
  expect(result.value).toBe(null)
  expect(result.details?.warnings ?? null).toBe(null)
  expect((result.details as any).errors[0]).toStrictEqual({ code: 0, path: defaultRootName, message: '–û—à–∏–±–∫–∞' })

  const pipeModel = v.str().pipe(v.custom((_path, value) => ({ ok: true, value: JSON.parse(value) })))
  expect(pipeModel.validate('{"foo":1}').value).toStrictEqual({ foo: 1 })
})

test('–ß–∞—Å—Ç–∏—á–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è', () => {
  const v = new Factory({
    throwIfConfigureError: true,
    // –º–∞—Å—Å–∏–≤—ã –∏ –æ–±—ä–µ–∫—Ç—ã –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞—é—Ç—Å—è, –æ–±—ä–µ–∫—Ç—ã —Å–æ—Ö—Ä–∞–Ω—è—é—Ç —Å–≤–æ–π—Å—Ç–≤–∞ –Ω–µ –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ –º–æ–¥–µ–ª—å—é –¥–∞–Ω–Ω—ã—Ö.
    createMode: 'none',
  })

  // –ê–Ω–∞–ª–æ–≥–∏ —Å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º, –≥–¥–µ —É –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å id
  const tableRecord = v.obj({
    id: v.positive()
  })

  // –ß–∞—Å—Ç–∏—á–Ω—ã–µ –º–æ–¥–µ–ª–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü
  const userRecordPart = v.obj({
    name: v.str().nonempty()
  })
  const tagRecordPart = v.obj({
    tag: v.str().nonempty()
  })

  // Pipe-—ã –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å —Å –Ω—É–ª—è, —ç—Ç–æ —Ç—Ä–µ–±—É–µ—Ç –º–∏–Ω–∏–º—É–º –¥–≤–µ –º–æ–¥–µ–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
  const userRecord = v.pipe(tableRecord, userRecordPart)
  // –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å —É–∂–µ –∏–º–µ—é—â—É—é—Å—è –º–æ–¥–µ–ª—å
  const tagRecord = tableRecord.pipe(tagRecordPart)

  expect(userRecord.validate({ id: 1, name: 'Jack' }).value).toStrictEqual({ id: 1, name: 'Jack' })
  expect(tagRecord.validate({ id: 2, tag: 'best' }).value).toStrictEqual({ id: 2, tag: 'best' })

  // –æ—à–∏–±–∫–∞ –Ω–∞ –ø–µ—Ä–≤–æ–º tableRecord - id –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å 0
  expect(userRecord.validate({ id: 0, name: 'Jack' })).toStrictEqual({ ok: false, value: null, details: { errors: expect.any(Object) } })
  // –æ—à–∏–±–∫–∞ –Ω–∞ –≤—Ç–æ—Ä–æ–º tagRecord tag - –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
  expect(tagRecord.validate({ id: 2, tag: '' })).toStrictEqual({ ok: false, value: null, details: { errors: expect.any(Object) } })

  // –£ –º–æ–¥–µ–ª–µ–π —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Å –æ–ø—Ü–∏–µ–π createMode:'none' –Ω–µ –∑–∞—Ç–∏—Ä–∞—é—Ç—Å—è —Å–≤–æ–π—Å—Ç–≤–∞
  expect(tagRecord.validate({ id: 2, tag: 'best', any: null }).value).toStrictEqual({ id: 2, tag: 'best', any: null })

  // pipe –º–æ–∂–µ—Ç —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –ª—é–±–æ–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö.
  // –≤–∞–∂–Ω–æ –ø–æ–º–Ω–∏—Ç—å - –∫–∞–∂–¥–∞—è —Å–ª–µ–¥—É—é—â–∞—è –º–æ–¥–µ–ª—å –ø–æ–ª—É—á–∏—Ç —Ç–æ —á—Ç–æ —É–¥–∞—á–Ω–æ –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–ª–∞ –ø—Ä–µ–¥—ã–¥—É—â–∞—è
  const preValidator = v.str().pipe(v.custom((_, json) => {
    const value = JSON.parse(json)
    value.id += 5
    return { ok: true, value }
  }))
  expect(preValidator.pipe(tagRecord).validate('{"id":1, "tag":"json"}').value).toStrictEqual({ id: 6, tag: 'json' })

  // –ø—Ä–æ–≤–µ—Ä—è—Ç—å –æ–±—ä–µ–∫—Ç –≤–Ω—É—Ç—Ä–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞ –Ω–µ—Ç –Ω–∏–∫–∞–∫–æ–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏,
  // —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞ –¥–∞–ª—å—à–µ, –∞ –ª—é–±–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç—Å—è –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–æ–º
  expect(preValidator.pipe(tagRecord).validate('{"i...')).toStrictEqual({ ok: false, value: null, details: { errors: expect.any(Object) } })
})
