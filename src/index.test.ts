import { ErrorLikeCollection } from 'js-base-error'
import {
  // expectTypeOf,
  test,
  expect
} from 'vitest'
import {
  type JsonLike,
  type TPropertyName,
  type TRes,
  type TResult,
  type TCustomResult,
  type IErrorDetail,
  type IErrorLike,
  type Context,
  type Re,
  Options,
  Config,
  errorResults,
  ConfigureError,
  NotConfiguredError,
  RequiredPropertyError,
  FaultyValueError,
  ModelIsFrozenError,
  Metadata,
  type Model,
  BaseModel,
  NoneModel,
  NumModel,
  StrModel,
  ObjModel,
  Factory,
  isString,
  plainCopy,
  propertyPathToString,
  safeToJson,
  JnvError,
  CombinedError
} from './index.js'

test('Quick start', () => {
  const v = new Factory()

  // –ö–æ—Ä–Ω–µ–≤–∞—è –º–æ–¥–µ–ª—å –º–æ–∂–µ—Ç –±—ã—Ç—å –≤–ª–æ–∂–µ–Ω–∞ –≤ –¥—Ä—É–≥–∏–µ –º–æ–¥–µ–ª–∏ –Ω–∞ –ª—é–±–æ–π —É—Ä–æ–≤–µ–Ω—å
  const userModel = v.obj({
    id: v.positive(), // —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–Ω–æ int().min(1)
    name: v.str().min(3),
    email: /^[0-9a-z]+@[0-9a-z]+\.[a-z]+$/i, // —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–Ω–æ v.re(...)
    gender: v.enum('male', 'female').optional(),
    // –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º –æ–±—ä–µ–∫—Ç –≤ —Ç–∏–ø, –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è .stopError() - –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å
    // –æ—à–∏–±–∫—É –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–ª–∏ `null`(–µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç).
    address: v.obj({
      city: v.nonempty(),   // —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–Ω–æ .str().nonempty() –∏–ª–∏ .str().min(1)
      street: 'any string', // —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–Ω–æ .str()
      zipCode: ''
    }).stopError()
  })

  const sampleUser = {
    id: 1,
    name: 'John',
    email: 'a@b.c',
    // gender: 'male' as ('male' | 'female'),
    address: {
      city: 'Springfield',
      street: '742 Evergreen Terrace',
      zipCode: '90210'
    }
  }
  expect(userModel.validate(plainCopy(sampleUser))).toStrictEqual({ ok: true, value: sampleUser })
  // @ts-expect-error
  sampleUser.gender = 'male'
  expect(userModel.validate(plainCopy(sampleUser))).toStrictEqual({ ok: true, value: sampleUser })

  // –û—à–∏–±–∫–∞ –≤ address –≤–µ—Ä–Ω–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
  sampleUser.address.city = ''
  expect(userModel.validate(plainCopy(sampleUser)))
    .toStrictEqual({
      ok: true,
      value: { id: 1, name: 'John', email: 'a@b.c', gender: 'male', address: null as any },
      warning: expect.objectContaining({
        detail: expect.objectContaining({
          name: 'Jnv.CombinedError',
          level: 'warning',
          warnings: expect.any(ErrorLikeCollection)
        })
      })
    })
  // –û—à–∏–±–∫–∞ –≤ User –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç –≤–∞–ª–∏–¥–∞—Ü–∏—é
  sampleUser.id = 0
  expect(userModel.validate(plainCopy(sampleUser)))
    .toMatchObject({
      ok: false,
      value: null,
      error: expect.objectContaining({
        detail: expect.objectContaining({
          // –∑–¥–µ—Å—å —Ç–∞–∫ –∂–µ –±—É–¥—É—Ç –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ –æ—à–∏–±–∫–∏
          name: 'Jnv.FaultyValueError',
          errors: expect.any(ErrorLikeCollection)
        })
      })
    })
})

test('Replacing an invalid type', () => {
  // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã —á–µ—Ä–µ–∑ JSDoc.
  const v = new Factory({
    throwIfConfigureError: true,
    createMode: 'obj'
  })

  const arrModel = v.arr([
    v.obj({ enabled: v.enum('on', 'off') })
      .def({ AhHaHa: 'üòã' }) // –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      .stopError()           // –Ω–µ –ø–æ–¥–Ω–∏–º–∞—Ç—å –æ—à–∏–±–∫—É
  ])

  expect(arrModel.validate([
    { enabled: 'on' },
    { enabled: 'oh no' },
    { enabled: 'off' }
  ]).value).toStrictEqual([
    { enabled: 'on' },
    { AhHaHa: 'üòã' },
    { enabled: 'off' }
  ])

  const arrRemoved = v.arr([
    v.obj({ enabled: v.enum('on', 'off') })
  ]).removeFaulty() // —É–¥–∞–ª–∏—Ç—å –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ

  expect(arrRemoved.validate([
    { enabled: 'on' },
    { enabled: 'oh no' },
    { enabled: 'off' }
  ]).value).toStrictEqual([
    { enabled: 'on' },
    { enabled: 'off' }
  ])

  const arrError = v.arr([
    v.obj({ enabled: v.enum('on', 'off') })
  ])

  expect(arrError.validate([
    {
      get enabled () {
        throw 123 // —Ö–∏—Ç—Ä—ã–π —Ö–æ–¥ - –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≤–∞–ª–∏—Ç—å –≤–∞–ª–∏–¥–∞—Ç–æ—Ä
      }
    }
  ]).error).toBeInstanceOf(JnvError)

  // –°–ø–∏—Å–æ–∫ –ø—Ä–æ–±–ª–µ–º
  const arrwarnings = v.arr([v.enum(1, 4)]).removeFaulty()
  const result = arrwarnings.validate([4, 3, 2, 1])
  expect(result.value).toStrictEqual([4, 1])
  expect(result.error).toBeFalsy() // –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏ –∏–≥–Ω–æ—Ä–∏—Ä—É—é—Ç—Å—è –∏ –ø—Ä–∏ ok –∑–¥–µ—Å—å –Ω–µ –º–æ–∂–µ—Ç error
  expect(result.warning).toBeInstanceOf(CombinedError) // ... –Ω–æ –º–æ–∂–µ—Ç –±—ã—Ç—å warning
  expect(result.warning?.detail.warnings).toBeInstanceOf(ErrorLikeCollection)
  // –ü—Ä–∏–≤–µ–¥–µ–º –∫ –Ω–∞—Ç–∏–≤–Ω–æ–º—É –º–∞—Å—Å–∏–≤—É, –ø–æ –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ–π –ø—Ä–∏—á–∏–Ω–µ, vitest –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç ErrorLikeCollection
  expect([...result.warning!.detail.warnings!]).toMatchObject([
    // –ö–∞–∂–¥–æ–µ –∏–∑ –∑–Ω–∞—á–µ–Ω–∏–π - —ç—Ç–æ IErrorLike.
    { message: "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–æ–±—Ä–∞—Ç—å —Å–æ–≤–º–µ—Å—Ç–∏–º–æ–≥–æ —Ç–∏–ø–∞ –≤ 'UnionModel'.", value: '2' },
    { message: "–≠–ª–µ–º–µ–Ω—Ç –º–∞—Å—Å–∏–≤–∞ '[2]' –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω." },
    //
    { message: "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–æ–±—Ä–∞—Ç—å —Å–æ–≤–º–µ—Å—Ç–∏–º–æ–≥–æ —Ç–∏–ø–∞ –≤ 'UnionModel'.", value: '3' },
    { message: "–≠–ª–µ–º–µ–Ω—Ç –º–∞—Å—Å–∏–≤–∞ '[1]' –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω." },
  ])
})

test('Freezing the model freeze()', () => {
  // –í–∫–ª—é—á–∏–º –ø–æ–¥–Ω—è—Ç–∏–µ –æ—à–∏–±–æ–∫ –ø—Ä–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–æ–≤–∞–Ω–∏–∏ –º–æ–¥–µ–ª–∏
  const v = new Factory({ throwIfConfigureError: true })

  const model = v.of({ foo: 1, bar: 2 })
  expect(model.isFrozen()).toBe(false)
  const modelFrozen = model.freeze('MyModelName') // —É—Å—Ç–∞–Ω–æ–≤–∏–º –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –∏–º—è –º–æ–¥–µ–ª–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –∑–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã—Ö Model
  expect(model).not.toBe(modelFrozen)

  // –ü–æ—Å–ª–µ –∑–∞–º–æ—Ä–æ–∑–∫–∏ –º–æ–¥–µ–ª–∏ –Ω–µ –º–æ–≥—É—Ç –º–µ–Ω—è—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã ...
  expect(() => (modelFrozen as ObjModel<any>).optional()).toThrow(ModelIsFrozenError)
  // ... –Ω–æ –º–æ–≥—É—Ç –∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ —Ä–∞–∑–º–æ—Ä–∞–∂–∏–≤–∞—Ç—å –º–æ–¥–µ–ª—å, –æ–ø—Ü–∏—è –∑–∞–º–æ—Ä–æ–∑–∫–∏ –±—É–¥–µ—Ç —Å–±—Ä–æ—à–µ–Ω–∞ –¥–ª—è –Ω–æ–≤–æ–π –æ–±–µ—Ä—Ç–∫–∏
  const unfreeze = modelFrozen.copy() as ObjModel<any>
  expect(unfreeze.optional()).toBeInstanceOf(ObjModel)

  expect(model.validate({ foo: 2, bar: 3 })).toStrictEqual({ ok: true, value: { foo: 2, bar: 3 } })
  expect(modelFrozen.validate({ foo: 4, bar: 5 })).toStrictEqual({ ok: true, value: { foo: 4, bar: 5 } })
  expect(unfreeze.validate({ foo: 6, bar: 7 })).toStrictEqual({ ok: true, value: { foo: 6, bar: 7 } })

  // –û—à–∏–±–∫–∞ –Ω–∞ –∏–º–µ–Ω–æ–≤–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏ –≤–µ—Ä–Ω–µ—Ç –ø–æ–ª–µ —Å –∏–º–µ–Ω–µ–º
  expect(modelFrozen.validate(null)).toMatchObject({
    error: {
      detail: {
        // –ò–º—è –º–æ–¥–µ–ª–∏ –Ω–∞ –∫–æ—Ç–æ—Ä–æ–π –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –µ—Å–ª–∏ –æ–Ω–æ –±—ã–ª–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ freeze(name)
        // –∏ –æ—à–∏–±–∫–∞ –≤–æ–∑–Ω–∏–∫–ª–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —ç—Ç–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
        model: 'MyModelName'
      }
    }
  })
})

test('Extending classes', () => {
  // –ö–ª–∞—Å—Å –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞ –æ–±—è–∑–∞–Ω —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –º–µ—Ç–æ–¥ `_validate()`
  class PhoneNumberModel extends BaseModel<JsonLike> {
    protected override _validate (ctx: Context, value: any): TRes<string> {
      if (!isString(value)) {
        return ctx.throwFaultyValueError(value, 'Expected a string')
      }
      // –ü–æ–ª—É—á–∏–º —Å—Å—ã–ª–∫—É –Ω–∞ Metadata –∏ –ø—Ä–æ–≤–µ—Ä–∏–º –≤–∞—Ä–∏–∞–Ω—Ç—ã RegExp
      const expectedType = (this._meta as Metadata<Re[]>).expectedType
      for (const re of expectedType) {
        if (re.test(value)) {
          return { ok: true, value }
        }
      }
      return ctx.throwFaultyValueError(value, 'Invalid phone number format')
    }
  }

  // –†–∞—Å—à–∏—Ä—è–µ–º —Ñ–∞–±—Ä–∏–∫—É –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–æ–≤
  class MyFactory extends Factory {
    phoneNumber (): PhoneNumberModel {
      // –î–æ–±–∞–≤–∏–º –∫ —Ñ–∞–±—Ä–∏–∫–µ –Ω–æ–≤—ã–π —Ç–∏–ø, –∏—Å–ø–æ–ª—å–∑—É—è –∫–µ—à regExp
      const re = this._regExpCache.getOf(/^\d{3}-\d{3}-\d{4}$/)
      const meta = Metadata.re(re, /* ...rest: Re[] */)
      // –ü–æ—Å–ª–µ–¥–Ω–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä null, —ç—Ç–æ –∫–ª—é—á Model.key –∏ –∑–¥–µ—Å—å –æ–Ω –Ω–µ –Ω—É–∂–µ–Ω.
      // –≠—Ç–æ —Å–≤–æ–π—Å—Ç–≤–æ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–≤—è–∑–∞–Ω–æ –∫ —Å–≤–æ–π—Å—Ç–≤—É –æ–±—ä–µ–∫—Ç–∞.
      return new PhoneNumberModel(this._config, this._defaultOptions, meta, null)
    }
  }

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—à –≤–∞–ª–∏–¥–∞—Ç–æ—Ä
  const v = new MyFactory()

  const phoneModel = v.phoneNumber()
  expect(phoneModel.validate('123-456-7890').value).toBe('123-456-7890')
  expect(phoneModel.validate('123-456-789').error!.message).toContain('Invalid phone number format')

  // ## –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –≤–∞–ª–∏–¥–∞—Ç–æ—Ä
  //
  // –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä Model –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–º–∏ –º–µ—Ç–æ–¥–∞–º–∏ –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö, –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –µ–≥–æ –ø—Ä–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–∏ –∫–ª–∞—Å—Å–æ–≤
  // –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–æ–±–ª–µ–º–∞—Ç–∏—á–Ω—ã–º.
  //
  // –ë–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–µ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö –¥–æ–ª–∂–Ω—ã —Ä–∞—Å—à–∏—Ä—è—Ç—å—Å—è —á–µ—Ä–µ–∑ Metadata.
  // –ü—Ä–∏–≥–æ—Ç–æ–≤–∏–º –Ω–∞–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –Ω–∞—à–µ–≥–æ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞
  const inventory = {
    basketball: new Set(['ball', 'hoop', 'jersey']),
    swimming: new Set(['goggles', 'cap', 'fins']),
    tennis: new Set(['paddle', 'ball', 'net']),
    golf: new Set(['club', 'tee', 'ball']),
    football: new Set(['ball', 'cleats', 'pads']),
  } as const
  type TInventoryKey = keyof typeof inventory

  // Metadata –æ–±—è–∑–∞–Ω —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –¥–≤–∞ –º–µ—Ç–æ–¥–∞:
  // getAllModels() - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤–Ω—É—Ç—Ä–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
  // copy() - –∫–æ–ø–∏—Ä—É–µ—Ç –º–æ–¥–µ–ª—å —Ç–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–º–º—É—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å, –Ω–æ –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å –ª–∏—à–Ω–∏–º–∏ –≥–ª—É–±–æ–∫–∏–º–∏
  //          –∫–æ–ø–∏—è–º–∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä –¥–∞–Ω–Ω—ã—Ö
  class InventoryMetadata extends Metadata<TInventoryKey> {
    // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –ø–æ –∂–µ–ª–∞–Ω–∏—é - –Ω–µ –∑–∞–±—ã–≤–∞–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–∏–ø –≤ –¥–∂–µ–Ω–µ—Ä–∏–∫ Metadata
    declare expectedType: TInventoryKey
    inventory: typeof inventory

    // –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –º–æ–∂–µ—Ç –±—ã—Ç—å —á–µ–º —É–≥–æ–¥–Ω–æ, –Ω–æ –±–∞–∑–∞ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ç–∏–ø–∞ TValueType
    constructor(inv: typeof inventory, key?: null | TInventoryKey) {
      super('custom') // –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π 'custom' –¥–ª—è –≤—Å–µ—Ö —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π
      this.inventory = inv
      this.expectedType = key ?? 'football'
    }

    override getAllModels (): null | Model<any>[] {
      // –£ –Ω–∞—Å –Ω–µ—Ç –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö Model –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ –Ω–µ—Ç –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–æ–≤–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–±–∏—Ä–∞–µ—Ç —ç—Ç–æ—Ç –º–µ—Ç–æ–¥
      return null
    }

    override copy (): this {
      // –û–±—ä–µ–∫—Ç inventory –Ω–µ–∏–∑–º–µ–Ω—è–µ–º –∏ –µ–≥–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å –ø–æ —Å—Å—ã–ª–∫–µ
      return new InventoryMetadata(this.inventory, this.expectedType) as this
    }

    // –ú–æ–∂–µ–º –¥–æ–±–∞–≤–∏—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã –Ω–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏–µ —Å –±–∞–∑–æ–≤—ã–º Metadata
    hasKey (value: any): value is TInventoryKey {
      return Object.keys(inventory).includes(value)
    }

    expectedValue (value: any): boolean {
      return this.inventory[this.expectedType].has(value)
    }
  }

  // –†–∞—Å—à–∏—Ä—è–µ–º –∫–ª–∞—Å—Å –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞.
  class InventoryModel extends BaseModel<string> {
    // –î–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –¥–µ–∫–ª–∞—Ä–∏—Ä—É–µ–º —Ç–∏–ø, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–∏–≤–æ–¥–∏—Ç—å `_meta as InventoryMetadata`
    declare protected readonly _meta: InventoryMetadata

    /**
     * –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –º–µ—Ç–æ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è. –ü–æ –∞–Ω–∞–ª–æ–≥–∏–∏ min(number) –¥–ª—è —á–∏—Å–µ–ª.
     */
    inventory (key: TInventoryKey): this {
      if (this._meta.expectedType === key) {
        return this
      }
      // –ü—Ä–æ–≤–µ—Ä–∏–º –Ω–µ –∑–∞–º–æ—Ä–æ–∂–µ–Ω–∞ –ª–∏ –Ω–∞—à–∞ –º–æ–¥–µ–ª—å.
      // –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –≤—ã–∑–æ–≤–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, –∑–∞–ø–∏—à–µ—Ç –æ—à–∏–±–∫—É –∏–ª–∏ –≤–µ—Ä–Ω–µ—Ç null.
      const frozen = this._throwIfFrozen()
      if (frozen) {
        // –ù–µ –º–µ–Ω—è–µ–º –º–æ–¥–µ–ª—å. –ï—Å–ª–∏ –Ω–µ –±—ã–ª–æ –∏—Å–∫–ª—é—á–µ–Ω–∏—è, –≤–Ω—É—Ç—Ä–∏ –±—É–¥–µ—Ç –∑–∞–ø–∏—Å–∞–Ω–∞ –æ—à–∏–±–∫–∞.
        return frozen
      }
      // –ü—Ä–æ–≤–µ—Ä–∏–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–∏–ø–∞, _throwIfConfigureError –≤—ã–∑–æ–≤–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –∏–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ—à–∏–±–∫—É
      if (!this._meta.hasKey(key)) {
        return this._throwIfConfigureError(`–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç 'inventory(key: ${safeToJson(key)})'`)
      }
      // –ö–æ–ø–∏—Ä—É–µ–º –∏ –æ–±–æ—Ä–∞—á–∏–≤–∞–µ–º —Å –Ω–æ–≤–æ–π –∫–æ–ø–∏–µ–π –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
      const copy = this._meta.copy()
      copy.expectedType = key
      // –ø–µ—Ä–≤—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä this._options –Ω–µ –∏–∑–º–µ–Ω–µ–Ω –∏ –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω –ø–æ —Å—Å—ã–ª–∫–µ
      return this._copyWith(null, copy)
    }

    protected override _validate (ctx: Context, value: any): TRes<string> {
      if (this._meta.expectedValue(value)) {
        return { ok: true, value }
      }
      return ctx.throwFaultyValueError(safeToJson(value), `–û–∂–∏–¥–∞–ª–æ—Å—å –∑–Ω–∞—á–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "${this._meta.expectedType}"`)
    }
  }

  // –†–∞—Å—à–∏—Ä—è–µ–º —Ñ–∞–±—Ä–∏–∫—É
  class InventoryFactory extends Factory {
    inventory (key?: undefined | null | TInventoryKey): InventoryModel {
      // –ú–æ–∂–Ω–æ –±—ã–ª–æ –∏ –≤—Å—Ç—Ä–æ–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ InventoryMetadata, –Ω–æ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞ —Å–¥–µ–ª–∞–µ–º –µ–≥–æ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–º
      const meta = new InventoryMetadata(inventory)
      if (meta.hasKey(key)) {
        meta.expectedType = key
      }
      return new InventoryModel(this._config, this._defaultOptions, meta, null)
    }
  }

  // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ —Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è —Ç—Ä–∏–≤–∏–∞–ª—å–Ω—ã–º
  const factory = new InventoryFactory({ stopIfError: true })
  const vBase = factory.inventory()
  const vInventory = v.obj({
    basketball: factory.inventory('basketball'), // –∏–∑ —Ñ–∞–±—Ä–∏–∫–∏
    golf: vBase.inventory('golf'),               // –∏–ª–∏ –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º
    tennis: vBase.inventory('tennis')
  })

  expect(vInventory.validate({ basketball: 'hoop', golf: /* —ç–º–∏—Ç–∏—Ä—É–µ–º –æ—à–∏–±–∫—É */ 'net', tennis: 'ball', })).toMatchObject({
    ok: true,
    value: {
      basketball: 'hoop',
      golf: null, // –æ—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–∞—è stopIfError()
      tennis: 'ball'
    },
    warning: {
      detail: {
        name: 'Jnv.CombinedError',
        warnings: expect.arrayContaining([
          expect.objectContaining({
            // –Ω–∞—à–∞ –æ—à–∏–±–∫–∞
            name: 'Jnv.FaultyValueError',
            message: '–û–∂–∏–¥–∞–ª–æ—Å—å –∑–Ω–∞—á–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "golf"'
          })
        ])
      }
    }
  })

  // –¢–µ—Å—Ç —Ç–∏–ø–∞ –Ω–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤ filters.ts
  // const result = vInventory.validate({ basketball: 'ball', golf: 'ball', tennis: 'ball' })
  // if (result.ok) {
  //   expectTypeOf(result.value).toEqualTypeOf<{ basketball: string, golf: string, tennis: string }>()
  // }
})

test('Type configuration errors getConfigureError()', () => {
  const v = new Factory()

  // –¢–∏–ø None –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ –ø—É–±–ª–∏—á–Ω—É—é —Ñ–∞–±—Ä–∏–∫—É, –Ω–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –∑–Ω–∞—á–µ–Ω–∏–π –Ω–µ –ø—Ä–æ—à–µ–¥—à–∏—Ö –ø—Ä–æ–≤–µ—Ä–∫—É –ø—Ä–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–æ–≤–∞–Ω–∏–∏.
  // –ï—Å–ª–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã –æ—à–∏–±–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–æ–≤–∞–Ω–∏—è, –ª—é–±–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ —ç—Ç–æ–≥–æ —Ç–∏–ø–∞ –ø–æ–ª—É—á–∏—Ç –æ—à–∏–±–∫—É {ok: false, value: null}.
  // –ü–æ–¥–Ω—è—Ç–∏–µ —ç—Ç–æ–π –æ—à–∏–±–∫–∏ –±—É–¥–µ—Ç –∑–∞–≤–∏—Å–µ—Ç—å –æ—Ç –æ–ø—Ü–∏–π –≤–∞–ª–∏—Ü–∏–∏.
  const none = new NoneModel(new Config(), new Options(), Metadata.none(), null)
  expect(none.validate(null)).toMatchObject({
    ok: false,
    value: null,
    error: {
      detail: {
        name: 'Jnv.NotConfiguredError',
        propertyPath: expect.any(String),
        value: 'null',
      }
    }
  })

  // –≠–º—É–ª–∏—Ä–æ–≤–∞—Ç—å —Ç–∞–∫–æ–π —Ç–∏–ø –º–æ–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏–≤ –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–µ –¥–ª—è json –∑–Ω–∞—á–µ–Ω–∏–µ
  // @ts-expect-error
  const unsupported = v.obj({ foo: BigInt(0) })
  expect(unsupported.validate({ foo: BigInt(0) })).toMatchObject({
    ok: false,
    value: null,
    error: {
      detail: {
        name: 'Jnv.FaultyValueError',
        errors: expect.any(ErrorLikeCollection)
      }
    }
  })

  // –û–ø–∏—Å–∞–Ω–∏–µ –≤—Å–µ—Ö –æ—à–∏–±–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–æ —á–µ—Ä–µ–∑ getConfigureError()
  // –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ —Å–æ–±–∏—Ä–∞–µ—Ç –æ—à–∏–±–∫–∏ –æ—Ç –∫–æ—Ä–Ω—è –∏—Å—Å–ª–µ–¥—É–µ–º–æ–≥–æ —Ç–∏–ø–∞ –∏ –∑–∞–≤–æ—Ä–∞—á–∏–≤–∞–µ—Ç –≤ –æ–¥–∏–Ω IErrorLike —Å –ø–æ–ª–µ–º errors
  const configureError: null | ConfigureError = unsupported.getConfigureError()
  expect(configureError).toMatchObject({
    name: 'Jnv.CombinedError',
    detail: {
      errors: expect.any(ErrorLikeCollection)
    }
  })

  const errors: IErrorLike[] = configureError!.detail.errors!
  expect(errors).toBeInstanceOf(Array)
  expect(errors).toBeInstanceOf(ErrorLikeCollection)
  // –ü–µ—Ä–≤—ã–π –≤—ã–∑–æ–≤ —ç—Ç–æ–≥–æ –º–µ—Ç–æ–¥–∞ —É–¥–∞–ª—è–µ—Ç –≤—Å–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏.
  expect(unsupported.getConfigureError()).toBe(null)

  // –ü—É—Ç—å –∫ –æ—à–∏–±–∫–µ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ <root>.foo, –∑–¥–µ—Å—å null —ç—Ç–æ –Ω–∞—à –∫–æ—Ä–µ–≤–æ–π –æ–±—ä–µ–∫—Ç –±–µ–∑ –∏–º–µ–Ω–∏
  // const propPath = `${propertyNameToString(null)}.foo`
  // –ù–∞–π–¥–µ–º –æ–∂–∏–¥–∞–µ–º—É—é –æ—à–∏–±–∫—É —Å –∫–æ–¥–æ–º ConfigureError
  const errorValue: IErrorLike = errors!.find(({ name, propertyName }) => name === 'Jnv.ConfigureError' && propertyName === 'foo')!
  expect(errorValue).toMatchObject({
    name: 'Jnv.ConfigureError',
    propertyPath: '<root>.foo',
    propertyName: 'foo'
  })

  // throw –ø—Ä–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
  const vError = new Factory({ throwIfConfigureError: true })
  // @ts-expect-error
  expect(() => vError.arr([BigInt(1)])).toThrow(ConfigureError)
  // min –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ max
  expect(() => vError.num().range(10, 0)).toThrow(ConfigureError)
})

test('Validation errors throw', () => {
  // –£—Å—Ç–∞–Ω–æ–≤–∏–º –æ–ø—Ü–∏—é –≤—ã–±—Ä–æ—Å–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–π
  const v = new Factory({ throwIfError: true })

  const nested = v.obj({ prop: v.enum(1, 2) })
  const sampleModel = v.obj({
    id: v.positive(),
    nested: nested
  })

  expect(sampleModel.validate({ id: 1, nested: { prop: 2 } })).toStrictEqual({ ok: true, value: { id: 1, nested: { prop: 2 } } })

  // –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–∏–ø
  expect(() => sampleModel.validate({ id: 1, nested: { prop: 'error value' } })).toThrow(FaultyValueError)
  // –ù–µ–≤–µ—Ä–Ω—ã–π id
  expect(() => sampleModel.validate({ id: 0, nested: { prop: 2 } })).toThrow(FaultyValueError)
  // –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ
  expect(() => sampleModel.validate({ id: 1 })).toThrow(RequiredPropertyError)

  // –û—à–∏–±–∫–∞ –≤—ã–∑–≤–∞–Ω–Ω–∞—è –Ω–∞ —Å–≤–æ–π—Å—Ç–≤–µ –æ–±—ä–µ–∫—Ç–∞, –ø–æ–¥–Ω–∏–º–∞–µ—Ç—Å—è –∏ –ø—Ä–µ—Ä—ã–≤–∞–µ—Ç –≤–∞–ª–∏–¥–∞—Ü–∏—é
  // @ts-expect-error
  expect(() => v.obj({ prop: BigInt(1) }).validate({ prop: 1 })).toThrow(NotConfiguredError)
  // –ù–æ –¥–ª—è –º–∞—Å—Å–∏–≤–æ–≤ –∏ union –æ—à–∏–±–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞—é—Ç—Å—è –∏–∑-–∑–∞ –ø–æ–¥–±–æ—Ä–∞ –∑–Ω–∞—á–µ–Ω–∏–π
  // –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±—É–¥–µ—Ç –∏–º–µ—Ç—å –æ–±—â—É—é –æ—à–∏–±–∫—É –Ω–µ–ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —Ç–∏–ø–∞ —ç–ª–µ–º–µ–Ω—Ç–∞ –º–∞—Å—Å–∏–≤–∞
  // @ts-expect-error
  expect(() => v.arr([{ prop: BigInt(1) }]).validate({ prop: 1 })).toThrow(FaultyValueError)
})

test('Custom Validator', () => {
  const v = new Factory()

  // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≤–∞–ª–∏–¥–∞—Ç–æ—Ä –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å –¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
  const vUnion = v.pipe(v.int(), v.custom((_path: TPropertyName[], _value: any) => {
    return {
      // ok: false, // –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –µ—Å–ª–∏ –µ—Å—Ç—å IErrorDetail
      // value: null,
      error: { name: 'Jnv.FaultyValueError', message: 'my error' }
    }
  }))
  expect(vUnion.validate(null)).toMatchObject({
    ok: false,
    value: null,
    error: {
      detail: {
        name: 'Jnv.FaultyValueError',
        errors: expect.any(ErrorLikeCollection)
      }
    }
  })

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã —Å–∞–º–∏ –∑–∞–≤–µ—Ä–Ω—É—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –æ—à–∏–±–∫—É
  const vCustom = v.custom((path: TPropertyName[], value: any) => {
    return errorResults.FaultyValueError(propertyPathToString(path), safeToJson(value), 'my custom error')
  })
  expect(vCustom.validate(null)).toMatchObject({
    ok: false,
    value: null,
    error: {
      name: 'Jnv.FaultyValueError',
      message: 'my custom error'
    }
  })

  // –î–∞–∂–µ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≤–∞–ª–∏–¥–∞—Ç–æ—Ä —É–ø–∞–¥–µ—Ç, –æ—à–∏–±–∫–∞ –±—É–¥–µ—Ç –ø–æ–π–º–∞–Ω–∞ –Ω–∞ –≤–µ—Ä—Ö–Ω–µ–º —É—Ä–æ–≤–Ω–µ
  const mUnknownCustomError = v.union(1, 'ok', v.custom((_path: TPropertyName[], _value: any) => {
    // –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–ø–∞–¥–µ—Ç –≤ cause, –∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏–º–µ—Ç –≤–∏–¥ UnknownError
    throw 12345
  }))
  expect(mUnknownCustomError.validate(null)).toMatchObject({
    ok: false,
    value: null,
    error: {
      name: 'Jnv.UnknownError',
      detail: {
        message: expect.any(String), // –°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –∑–¥–µ—Å—å –±—É–¥–µ—Ç 'IErrorLike was not created'
        cause: 12345
      }
    }
  })

  // –ù–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π, –≤–∞–ª–∏–¥–∞—Ç–æ—Ä –æ–±—è–∑–∞–Ω –≤–µ—Ä–Ω—É—Ç—å –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—É—é –æ—à–∏–±–∫—É
  // –î–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫ –º–æ–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å–∫–æ–µ –ø–æ–ª–µ –∏ –ø–µ—Ä–µ–¥–∞—Ç—å –æ—à–∏–±–∫–∏ –≤ cause,
  // –Ω–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∑–∞—Ç—å –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –¥–ª—è jnv –æ—à–∏–±–∫–∏ –≤ IErrorDetail.name
  const vs = new Factory({ removeFaulty: true })

  const vControlledError = vs.obj({
    array: ['any string'],
    field: vs.custom((_path: TPropertyName[], _value: any) => {
      throw {
        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ –ø–æ–ª–µ - –ª—é–±–æ–µ –∏–º—è —Å–æ –∑–Ω–∞—á–µ–Ω–∏–µ–º –ø—Ä–∏–≥–æ–¥–Ω—ã–º –¥–ª—è –ø—Ä–∏–≤–µ–¥–µ–Ω–∏—è –∫ —Å—Ç—Ä–æ–∫–µ toString() –∏–ª–∏ toJSON()
        meta: 'My.Id.Error',
        cause: new Error('My internal error')
      }
    })
  })

  expect(vControlledError.validate({ array: [123], field: null })).toMatchObject({
    ok: false,
    value: null,
    error: {
      detail: {
        // –°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—è –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞
        name: 'Jnv.UnknownError',
        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ –ø–æ–ª–µ
        meta: 'My.Id.Error',
        // –û—à–∏–±–∫–∞
        cause: expect.objectContaining({ message: expect.stringContaining('My internal error') }),
        warnings: expect.arrayContaining([expect.objectContaining({
          propertyPath: 'array.[0]'
        })])
      }
    }
  })
})

test('Partial validation', () => {
  const v = new Factory({
    throwIfConfigureError: true,
    // –º–∞—Å—Å–∏–≤—ã –∏ –æ–±—ä–µ–∫—Ç—ã –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞—é—Ç—Å—è, –æ–±—ä–µ–∫—Ç—ã —Å–æ—Ö—Ä–∞–Ω—è—é—Ç —Å–≤–æ–π—Å—Ç–≤–∞ –Ω–µ –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ –º–æ–¥–µ–ª—å—é –¥–∞–Ω–Ω—ã—Ö.
    createMode: 'none',
  })

  // –ê–Ω–∞–ª–æ–≥–∏ —Å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º, –≥–¥–µ —É –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å id
  const tableRecord = v.obj({
    id: v.positive()
  })

  // –ß–∞—Å—Ç–∏—á–Ω—ã–µ –º–æ–¥–µ–ª–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü
  const userRecordPart = v.obj({
    name: v.str().nonempty()
  })
  const tagRecordPart = v.obj({
    tag: v.str().nonempty()
  })

  // Pipe-—ã –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å —Å –Ω—É–ª—è, —ç—Ç–æ —Ç—Ä–µ–±—É–µ—Ç –º–∏–Ω–∏–º—É–º –¥–≤–µ –º–æ–¥–µ–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
  const userRecord = v.pipe(tableRecord, userRecordPart)
  // –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å —É–∂–µ –∏–º–µ—é—â—É—é—Å—è –º–æ–¥–µ–ª—å
  const tagRecord = tableRecord.pipe(tagRecordPart)

  expect(userRecord.validate({ id: 1, name: 'Jack' }).value).toStrictEqual({ id: 1, name: 'Jack' })
  expect(tagRecord.validate({ id: 2, tag: 'best' }).value).toStrictEqual({ id: 2, tag: 'best' })

  // –æ—à–∏–±–∫–∞ –Ω–∞ –ø–µ—Ä–≤–æ–º tableRecord - id –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å 0
  expect(userRecord.validate({ id: 0, name: 'Jack' })).toStrictEqual({ ok: false, value: null, error: expect.any(Object) })
  // –æ—à–∏–±–∫–∞ –Ω–∞ –≤—Ç–æ—Ä–æ–º tagRecord tag - –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
  expect(tagRecord.validate({ id: 2, tag: '' })).toStrictEqual({ ok: false, value: null, error: expect.any(Object) })

  // –£ –º–æ–¥–µ–ª–µ–π —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Å –æ–ø—Ü–∏–µ–π createMode:'none' –Ω–µ –∑–∞—Ç–∏—Ä–∞—é—Ç—Å—è —Å–≤–æ–π—Å—Ç–≤–∞
  expect(tagRecord.validate({ id: 2, tag: 'best', any: null }).value).toStrictEqual({ id: 2, tag: 'best', any: null })

  // pipe –º–æ–∂–µ—Ç —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –ª—é–±–æ–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö.
  // –≤–∞–∂–Ω–æ –ø–æ–º–Ω–∏—Ç—å - –∫–∞–∂–¥–∞—è —Å–ª–µ–¥—É—é—â–∞—è –º–æ–¥–µ–ª—å –ø–æ–ª—É—á–∏—Ç —Ç–æ —á—Ç–æ —É–¥–∞—á–Ω–æ –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–ª–∞ –ø—Ä–µ–¥—ã–¥—É—â–∞—è
  const preValidator = v.str().pipe(v.custom((_, json) => {
    const value = JSON.parse(json)
    value.id += 5
    return { ok: true, value }
  }))
  expect(preValidator.pipe(tagRecord).validate('{"id":1, "tag":"json"}').value).toStrictEqual({ id: 6, tag: 'json' })

  // –ø—Ä–æ–≤–µ—Ä—è—Ç—å –æ–±—ä–µ–∫—Ç –≤–Ω—É—Ç—Ä–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞ –Ω–µ—Ç –Ω–∏–∫–∞–∫–æ–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏,
  // —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞ –¥–∞–ª—å—à–µ, –∞ –ª—é–±–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç—Å—è –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–æ–º
  expect(preValidator.pipe(tagRecord).validate('{"i...')).toStrictEqual({ ok: false, value: null, error: expect.any(Object) })
})

test('All types', () => {
  const v = new Factory()

  // –¢–∏–ø –Ω–µ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –∏ –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ª—é–±–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–∞–∫ –µ—Å—Ç—å.
  expect(v.raw().validate(undefined)).toStrictEqual({ ok: true, value: undefined })
  expect(v.obj({ foo: v.raw() }).def({ foo: 'bar' }).stopError().validate({}))
    .toStrictEqual({ ok: true, value: { foo: 'bar' }, warning: expect.any(Object) })
  expect(v.obj({ foo: v.raw().optional(123) }).validate({}))
    .toStrictEqual({ ok: true, value: { foo: 123 } })

  // –ê–≤—Ç–æ-–ø–∞—Ä—Å–µ—Ä –ª—é–±–æ–≥–æ JsonLike —Ç–∏–ø–∞ + Regexp –¥–ª—è —Å—Ç—Ä–æ–∫ + –≤–ª–æ–∂–µ–Ω–Ω—ã–µ —Ç–∏–ø—ã Model
  expect(v.of({ foo: /[0-7]{1}/ }).validate({ foo: '6' })).toStrictEqual({ ok: true, value: { foo: '6' } })
  expect(v.of({ foo: /[0-7]{1}/ }).validate({ foo: '8' })).toStrictEqual({ ok: false, value: null, error: expect.any(Object) })

  expect(v.bool().validate(true)).toStrictEqual({ ok: true, value: true })
  expect(v.bool().validate(false)).toStrictEqual({ ok: true, value: false })
  expect(v.bool().validate(null)).toStrictEqual({ ok: false, value: null, error: expect.any(Object) })

  expect(v.num().validate(1.23)).toStrictEqual({ ok: true, value: 1.23 })
  expect(v.num().validate('1')).toStrictEqual({ ok: false, value: null, error: expect.any(Object) })
  expect(v.num().validate(BigInt(0))).toStrictEqual({ ok: false, value: null, error: expect.any(Object) })
  expect(v.num().min(5).validate(5)).toStrictEqual({ ok: true, value: 5 })
  expect(v.num().max(5).validate(5)).toStrictEqual({ ok: true, value: 5 })
  expect(v.num().min(5).validate(4.9)).toStrictEqual({ ok: false, value: null, error: expect.any(Object) })
  expect(v.num().max(5).validate(5.1)).toStrictEqual({ ok: false, value: null, error: expect.any(Object) })
  expect(v.num().min(-10).max(+10).validate(-2)).toStrictEqual({ ok: true, value: -2 })
  expect(v.num().min(-10).max(+10).validate(-12))
    .toStrictEqual({ ok: false, value: null, error: expect.any(Object) })
  expect(v.num().min(-10).max(+10).validate(+12))
    .toStrictEqual({ ok: false, value: null, error: expect.any(Object) })
  // exclusive: true
  expect(v.num().min(5, true).validate(5)).toStrictEqual({ ok: false, value: null, error: expect.any(Object) })
  expect(v.num().max(5, true).validate(5)).toStrictEqual({ ok: false, value: null, error: expect.any(Object) })

  // –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ min(0) float >= 0
  expect(v.nonnegative().validate(0)).toStrictEqual({ ok: true, value: 0 })
  expect(v.nonnegative().validate(-0.0001)).toStrictEqual({ ok: false, value: null, error: expect.any(Object) })

  // –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ v.num().int()
  expect(v.int().validate(5)).toStrictEqual({ ok: true, value: 5 })
  expect(v.int().validate(5.8)).toStrictEqual({ ok: false, value: null, error: expect.any(Object) })

  // –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ v.num().int().min(1)
  expect(v.positive().validate(1)).toStrictEqual({ ok: true, value: 1 })
  expect(v.positive().validate(0)).toStrictEqual({ ok: false, value: null, error: expect.any(Object) })
  expect(v.positive().validate(1.2)).toStrictEqual({ ok: false, value: null, error: expect.any(Object) })

  expect(v.range(-10, +10).validate(0)).toStrictEqual({ ok: true, value: 0 })
  expect(v.range(-10, +10).validate(-12)).toStrictEqual({ ok: false, value: null, error: expect.any(Object) })
  expect(v.range(-10, +10).validate(+12)).toStrictEqual({ ok: false, value: null, error: expect.any(Object) })
  expect(v.range(-10, +10, true).validate(9.9)).toStrictEqual({ ok: true, value: 9.9 })
  expect(v.range(-10, +10, true).validate(10)).toStrictEqual({ ok: false, value: null, error: expect.any(Object) })

  expect(v.str().validate('')).toStrictEqual({ ok: true, value: '' })
  expect(v.str().nonempty().validate('any value')).toStrictEqual({ ok: true, value: 'any value' })
  expect(v.str().nonempty().validate('')).toStrictEqual({ ok: false, value: null, error: expect.any(Object) })

  expect(v.re(/abc/).validate('_abc_')).toStrictEqual({ ok: true, value: '_abc_' })
  expect(v.re(/abc/).min(5).validate('_abc_')).toStrictEqual({ ok: true, value: '_abc_' })
  expect(v.re(/abc/).min(6).validate('_abc_')).toStrictEqual({ ok: false, value: null, error: expect.any(Object) })
  expect(v.re(/abc/).validate('_abXc_')).toStrictEqual({ ok: false, value: null, error: expect.any(Object) })
  expect(v.re(/abc/, /bXc/).validate('_abXc_')).toStrictEqual({ ok: true, value: '_abXc_' })

  // null - —ç—Ç–æ –ø—Å–µ–≤–¥–æ–Ω–∏–º v.literal(null)
  expect(v.null().validate(null)).toStrictEqual({ ok: true, value: null })
  expect(v.null().validate('not null')).toStrictEqual({ ok: false, value: null, error: expect.any(Object) })
  expect(v.literal(1).validate(1)).toStrictEqual({ ok: true, value: 1 })
  expect(v.literal('off').validate('off')).toStrictEqual({ ok: true, value: 'off' })
  expect(v.literal('off').validate('on')).toStrictEqual({ ok: false, value: null, error: expect.any(Object) })

  // –ù–µ—Å–∫–æ–ª—å–∫–æ –ª–∏—Ç–µ—Ä–∞–ª–æ–≤
  expect(v.enum(false, true, 'on', 'off').validate('on')).toStrictEqual({ ok: true, value: 'on' })
  expect(v.enum(false, true, 'on', 'off').validate(1)).toStrictEqual({ ok: false, value: null, error: expect.any(Object) })

  const simpleObj = v.obj({
    a: null,
    b: true,
    c: 0,
    d: 'any str',
    e: /re/,
    nested: { f: ['str array'] },
    array: [0],
  })
  expect(simpleObj.validate({
    a: null,
    b: false,
    c: 123,
    d: 'hello',
    e: '_re_',
    nested: { f: ['one', 'two'] },
    array: [1, 2, 3],
  })).toStrictEqual({
    ok: true, value: {
      a: null,
      b: false,
      c: 123,
      d: 'hello',
      e: '_re_',
      nested: { f: ['one', 'two'] },
      array: [1, 2, 3],
    }
  })
  expect(simpleObj.validate({
    a: 'error value', // <= error type
    b: false,
    c: 123,
    d: 'hello',
    e: '_re_',
    nested: { f: ['one', 'two'] },
    array: [1, 2, 3],
  })).toStrictEqual({ ok: false, value: null, error: expect.any(Object) })

  const simpleArr = v.arr([{ foo: 0 }, { bar: '' }])
  expect(simpleArr.validate([{ foo: 123 }]))
    .toStrictEqual({ ok: true, value: [{ foo: 123 }] })
  expect(simpleArr.validate([{ foo: 123 }, { bar: 'str' }]))
    .toStrictEqual({ ok: true, value: [{ foo: 123 }, { bar: 'str' }] })
  expect(simpleArr.validate([{ foo: 123 }, { bar: 456 }]))
    .toStrictEqual({ ok: false, value: null, error: expect.any(Object) })
  // –í–∞—Ä–∏–∞–Ω—Ç —Å min/max
  const numArray = v.arr([0]).range(1, 4)
  expect(numArray.validate([1, 2]))
    .toStrictEqual({ ok: true, value: [1, 2] })
  expect(numArray.validate([1, 2, 3, 4, 5]))
    .toStrictEqual({ ok: false, value: null, error: expect.any(Object) })

  // —Ç–æ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–∏–ø–æ–≤
  const simpleTuple = v.tuple(['str', { prop: v.enum('on', 'off') }])
  expect(simpleTuple.validate(['abc', { prop: 'on' }]))
    .toStrictEqual({ ok: true, value: ['abc', { prop: 'on' }] })
  expect(simpleTuple.validate(['abc', 'xyz', { prop: 'on' }]))
    .toStrictEqual({ ok: false, value: null, error: expect.any(Object) })

  // –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Ç–∏–ø–∞
  const simpleUnion = v.union(v.enum('on', 'off'), true)
  expect(simpleUnion.validate('on')).toStrictEqual({ ok: true, value: 'on' })
  expect(simpleUnion.validate(false)).toStrictEqual({ ok: true, value: false })
  expect(simpleUnion.validate('true'))
    .toStrictEqual({ ok: false, value: null, error: expect.any(Object) })

  // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è —Ñ—É–Ω–∫—Ü–∏—è
  let err: null | IErrorLike | IErrorDetail = null
  function customValidate (_path: TPropertyName[], value: any): TResult<JsonLike> | TCustomResult<JsonLike> {
    if (err) {
      // @ts-expect-error –ó–Ω–∞—á–µ–Ω–∏–µ ok –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤ false, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –µ—Å–ª–∏ –µ—Å—Ç—å –ø–æ–ª–µ errors
      return { ok: true, value, error: err }
    }
    return { ok: true, value }
  }
  const simpleCustom = v.custom(customValidate)
  expect(simpleCustom.validate('my value')).toStrictEqual({ ok: true, value: 'my value' })
  err = { name: 'Jnv.UnknownError', /* propertyPath: '—ç—Ç–æ –ø–æ–ª–µ –±—É–¥–µ—Ç –∑–∞–º–µ–Ω–µ–Ω–æ, –∑–¥–µ—Å—å –Ω—É–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É' */  message: '–û—à–∏–±–∫–∞' }
  const result = simpleCustom.validate('my value')
  expect(result.ok).toBe(false)
  expect(result.value).toBe(null)
  expect(result?.warning ?? null).toBe(null)
  expect((result as any).error).toMatchObject({ name: 'Jnv.UnknownError', message: '–û—à–∏–±–∫–∞' })

  const pipeModel = v.str().pipe(v.custom((_path, value) => ({ ok: true, value: JSON.parse(value) })))
  expect(pipeModel.validate('{"foo":1}').value).toStrictEqual({ foo: 1 })
})

test('Decomposition of an object', () => {
  const v = new Factory()

  const obj = v.obj({
    foo: v.int(),
    bar: v.str()
  })

  const name2Model = obj.decompose()

  expect(Object.keys(name2Model)).toStrictEqual(['foo', 'bar'])
  expect(name2Model.foo).toBeInstanceOf(NumModel)
  expect(name2Model.bar).toBeInstanceOf(StrModel)
})
